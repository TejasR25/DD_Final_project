module vga_timing_generator (
    input  logic clk,             // 25 MHz pixel clock
    input  logic rst,
    output logic [9:0] pixel_x,   // Current pixel x (0–799)
    output logic [9:0] pixel_y,   // Current pixel y (0–524)
    output logic hsync,
    output logic vsync,
    output logic video_on         // High when within visible area
);

    // Horizontal timing constants
    localparam H_DISPLAY    = 640;
    localparam H_FRONT_PORCH= 16;
    localparam H_SYNC_PULSE = 96;
    localparam H_BACK_PORCH = 48;
    localparam H_TOTAL      = H_DISPLAY + H_FRONT_PORCH + H_SYNC_PULSE + H_BACK_PORCH;

    // Vertical timing constants
    localparam V_DISPLAY    = 480;
    localparam V_FRONT_PORCH= 10;
    localparam V_SYNC_PULSE = 2;
    localparam V_BACK_PORCH = 33;
    localparam V_TOTAL      = V_DISPLAY + V_FRONT_PORCH + V_SYNC_PULSE + V_BACK_PORCH;

    logic [9:0] h_count, v_count;

    // Horizontal counter
    always_ff @(posedge clk or posedge rst) begin
        if (rst)
            h_count <= 0;
        else if (h_count == H_TOTAL - 1)
            h_count <= 0;
        else
            h_count <= h_count + 1;
    end

    // Vertical counter
    always_ff @(posedge clk or posedge rst) begin
        if (rst)
            v_count <= 0;
        else if (h_count == H_TOTAL - 1) begin
            if (v_count == V_TOTAL - 1)
                v_count <= 0;
            else
                v_count <= v_count + 1;
        end
    end

    // Outputs
    assign pixel_x = h_count;
    assign pixel_y = v_count;

    assign hsync = ~(h_count >= (H_DISPLAY + H_FRONT_PORCH) &&
                     h_count <  (H_DISPLAY + H_FRONT_PORCH + H_SYNC_PULSE));

    assign vsync = ~(v_count >= (V_DISPLAY + V_FRONT_PORCH) &&
                     v_count <  (V_DISPLAY + V_FRONT_PORCH + V_SYNC_PULSE));

    assign video_on = (h_count < H_DISPLAY) && (v_count < V_DISPLAY);

endmodule
